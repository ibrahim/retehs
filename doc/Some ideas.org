Created: 2014-12-11

This document contains some more or less reasonable elements of
programming style in Haskell.

* Always use -Wall -W

* Strive to make hlint quiet

* Necessarily use -Werror in production codes

* Organize your codes not to tolerate any exceptions
  other than (probably) those in IO monad.
  - Look into foreign procedures to track their exception policy and
    try to avoid any of these which potentially raise exceptions.
  - When the elimination of a particular exception-raising procedure
    is not possible, work out ways to handle the exceptions locally
    and under no circumstances propagate it.
  - When possible, proove the exception can't be raised in any of your
    usage scenarios.

* When necessary, constrain the sizes of collections
  by wrapping in ADTs (preferably newtypes) and providing
  mandatory (by encapsulation) constructors that enforce the
  constraints on creation.

* Combining stuff

** Tend to make endomorphisms/monoids the key elements of your API

** Constraints should be put on as soon as possible
   especially on data.

** Avoid sub-typing and late binding in any situation

** Avoid multiple (data) constructors if possible
