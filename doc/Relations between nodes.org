| NODE TYPE | CHILDREN        | PARENTS   |
|-----------+-----------------+-----------|
| Dtn       | Join            |           |
| Bmem      | Join            | Join      |
| Join      | Bmem, Neg, Prod | Dtn, Bmem |
| Neg       | Neg, Prod       | Join, Neg |
| Prod      |                 | Join, Neg |

Powtarzające się operacje:
* Dodanie węzła-dziecka do węzła-rodzica
* Dodanie węzła-dziecka do węzła-rodzica (allChildren)
* Dodanie tokenu do węzła, w którym jest składowany
* Dodanie tokenu-dziecka do tokena-rodzica
* "Dodanie" Amem do Wme
* Dodanie Wme do Amem
* "Dodanie" Tok do Wme
* Dodanie NegativeJoinResult to Ntok
* Dodanie węzła do Amem.amemSuccessors

INTERESUJĄCE ZMIENNE TRANSAKCYJNE

envIdState		:: !(TVar Id)
-- idgen - nie zmieniamy

envConstants		:: !(TVar (Map.HashMap String Constant))
envVariables		:: !(TVar (Map.HashMap String Variable))
-- internowanie stałych i zmiennych - nie zmieniamy

envWmes			:: !(TVar (Map.HashMap WmeKey Wme))
envWmesByObj		:: !(TVar WmesByObj )
envWmesByAttr		:: !(TVar WmesByAttr)
envWmesByVal		:: !(TVar WmesByVal )
-- dodanie   wme do Env
-- usunięcie Wme z  Env

envAmems		:: !(TVar (Map.HashMap WmeKey Amem))
-- dodanie   Amem do Env
-- usunięcie Amem z  Env

envProds		:: !(TVar (Set.HashSet Prod))
-- dodanie   Prod do Env
-- usunięcie Prod z  Env

wmeAmems		:: !(TVar [Amem])
-- Dodanie Amem do Wme
-- Usunięcie Amem z Wme (? nie wiem, czy potrzebne)

wmeToks			:: !(TVar (Set.HashSet WmeTok))
-- Dodanie Tok do Wme
-- Usunięcie Tok z Wme

wmeNegJoinResults	:: !(TVar (Set.HashSet NegJoinResult))
-- Dodanie NegJoinResult do Wme
-- Usunięcie NegJoinResult z Wme

btokChildren		:: !(TVar (Set.HashSet WmeTok))
-- Dodanie WmeTok do btokChildren
-- Usunięcie Wme Tok z btokChildren

ntokChildren		:: !(TVar (Set.HashSet (Either Ntok Ptok)))
-- Dodanie/usunięcie

ntokNegJoinResults	:: !(TVar (Set.HashSet NegJoinResult))
-- Dodanie/usunięcie

amemSuccessors		:: !(TVar (Seq.Seq AmemSuccessor))
-- Dodanie/usunięcie

amemRefCount		:: !(TVar Int)
-- Inkrementacja/dekrementacja - zastanowić się.

amemWmes		:: !(TVar (Set.HashSet Wme))
amemWmesByObj		:: !(TVar WmesByObj)
amemWmesByAttr		:: !(TVar WmesByAttr)
amemWmesByVal		:: !(TVar WmesByVal)
-- Dodanie/usunięcie Wme

dtnAllChildren		:: !(TVar (AmemSuccessorsMap Join))
-- Dodanie/usunięcie do allChildren

bmemChildren		:: !(TVar (Set.HashSet       Join))
-- Dodanie/usunięcie

bmemAllChildren		:: !(TVar (AmemSuccessorsMap Join))
-- Dodanie/usunięcie allChildren

bmemToks		:: !(TVar (Set.HashSet       Btok))
-- Dodanie/usunięcie

joinBmem		:: !(TVar (Maybe             Bmem))
-- Dodanie/usunięcie (ew. sprawdzenie, czy nie nadpisujemy)

joinNegs		:: !(TVar (AmemSuccessorsMap Neg ))
-- Dodanie/usunięcie
joinProds		:: !(TVar (Set.HashSet       Prod))
-- Dodanie/usunięcie

joinLeftUnlinked	:: !(TVar Bool)
joinRightUnlinked	:: !(TVar Bool)
-- U/L - abstrakcja już jest

negNegs			:: !(TVar (AmemSuccessorsMap Neg))
-- Dodanie/usunięcie
negProds		:: !(TVar (Set.HashSet       Prod))
-- Dodanie/usunięcie

negToks			:: !(TVar (Set.HashSet Ntok))
-- Dodanie/usunięcie

negRightUnlinked	:: !(TVar Bool)
-- U/L - abstracja już jest

prodToks		:: !(TVar (Set.HashSet Ptok))
-- Dodanie/usunięcie
